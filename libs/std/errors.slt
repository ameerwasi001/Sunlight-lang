Maybe <- Some{a} | None

seq ? f@Some & s@Some -> some: f.a: s.a
seq ? f@None | s@None -> s

unit ? r@Maybe -> some: s

bind ? s@Some -> f: s.a
bind ? s@None -> none

empty ? r@Maybe -> None
append ? a@Some & b@None -> a
append ? a@None & b@Some -> b
append ? a@Some & b@Some -> some: a.a append b.a

class getSome: mb, d
mb@Some -> mb.a;
mb@None -> d;

fmap ? s@Some -> some: f: s.a
fmap ? s@None -> none

glance ? s@Some -> some: glance: fi, i, s.a
glance ? s@None -> none

access ? s@Some -> i access s.a
access ? s@None -> none

unedit ? s@Some -> some: unedit: s.a, i, fi, uf
unedit ? s@None -> none

class toEither: s
s@Some -> right: s.a
s@None -> left: ()

Either <- Right{r} | Left{l}

class getRight: et, d
et@Right -> et.a
et@Left -> d

class getLeft: et, d
et@Right -> d
et@Left -> et.l;

fmap ? s@Right -> f: s.r
fmap ? s@Left -> s

unit ? r@Either -> right: s

bind ? s@Left -> s.l
bind ? s@Right -> f: s.r

seq ? f@Right & s@Right -> right: f.r: s.r
seq ? f@Left & s@Left -> left: f.l: s.l
seq ? f@Left | s@Right -> s

unedit ? s@Right -> right: unedit: s.r, i, fi, uf
unedit ? s@Left -> left: unedit: s.l, i, fi, uf

glance ? s@Right -> right: glance: fi, i, s.r
glance ? s@Left -> left: glance: fi, i, s.l

access ? s@Right -> i access s.r
access ? s@Left -> i access s.l