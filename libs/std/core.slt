external "std/modify" {baseModify}

id: a <- a

const: a <- (\x -> a)

min: a, b <- if a > b then b else a
max: a, b <- if a > b then a else b

cmp: f, g <- \f: g: x
cmp_ <- flip: cmp

fst: t <- a where (a, b) <- t end
snd: t <- b where (a, b) <- t end

flip: f, x, y <- f: y, x

add: a, b <- a+b
sub: a, b <- a-b
mul: a, b <- a*b
div: a, b <- a/b

subFlip <- flip: sub

appendList: a, b <- a .. b

inc <- 1add
dec <- (-1)add

double <- 2mul
half <- \if x = 0 then 0 else x/2

cons <- \[x]appendList

class safeDiv: a, b
b = 0 -> none
true -> some: a/b

class modulus: n
n@SltNum -> unsafeMod: n

not <- \if x then false else true
notB <- not cmp bool

open stringify: v
stringify ? def -> baseStringify: v

open bool: a
bool ? a@SltNum -> a /= 0
bool ? a@SltString -> a /= ""
bool ? a@SltBool -> a

class modify: st, el, f
el@SltString & f@SltFunc -> baseModify: st, el, f