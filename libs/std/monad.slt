open unit: r, s
open bind: s, f

unit ? r@SltList -> [s]
bind ? s@SltList -> concat: &SltList, fmap: f, s

unit ? r@SltFunc -> \a -> s

join: s <- s bind idf

class mapM: f, r, xs
[] = xs -> unit: r, []
true -> (f: head: xs) bind \y -> (mapM: f, r, tail: xs) bind \ys -> unit: r, ([y] .. ys)

mapM_: f, r, xs <- (mapM: f, r, xs) bind \unit: r, ()

sequence <- mapM: idf
sequence_ <- mapM_: idf

-- Monad symbols
{^>=} <- bind
{^>}: a, b <- a {^>=} \b
{<^}: a, b <- a {^>=} \n -> b {^>=} \unit: (ovTypeOf: a), n