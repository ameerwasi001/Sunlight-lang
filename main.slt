lib "*std"
lib "*strict"
lib "*IO"

a <- Some{a :: (\a, b, c -> [[a, b*2], b, c]) fmap' [8, 5] seq' [6, 3] seq' [1, 9]}

f <- \x*2
fcx: f <- \f, x -> change: x, 1, f <| \f, x -> change: x, 2, f <| f
mdLs <- \f -> change: a, 2, f <| fcx <| f

mod Shapes
    Shape <- !Circle{r} | !Square{e} | !Triangle{a, b, c}
    class getV: s
    s@$Circle -> s.r*2
    s@$Square -> s.e*2
    s@$Triangle -> (s.a + s.b + s.c)/2
end

circ <- Shapes::Circle{r :: 15}

tri <- Shapes::Triangle{a :: 2, b :: 9, c :: 7}

fib: n <- if get: (\x<2) fmap n then Strict::strict: 1 else add fmap' (fib: dec fmap n) seq' (fib: (\x-2) fmap n)

out <- println: (Strict::applyT: fib) fmap mlp2 seq (some: \x+circV) seq mdLs[2][1][2] where
    mlp2 <- unit: &Maybe, double
    circV <- Shapes::getV: circ
end