id: a <- a

const: a <- (\x -> a)

min: a, b <- if a > b then b else a
max: a, b <- if a > b then a else b

cmp: f, g <- \f: g: x
cmp_ <- flip: cmp

fst: t <- a where (a, b) <- t end
snd: t <- b where (a, b) <- t end

flip: f, x, y <- f: y, x

add: a, b <- a+b
sub: a, b <- a-b
mul: a, b <- a*b
div: a, b <- a/b

inc <- \x+1
dec <- \x-1

cons: a, b <- [a] .. b

class safeDiv: a, b
b = 0 -> none
true -> some: a/b

class modulus: n
n@SltNum -> unsafeMod: n

open stringify: v
stringify ? def -> baseStringify: v

class modify: st, el, f
el@SltString & f@SltFunc -> baseModify: st, el, f