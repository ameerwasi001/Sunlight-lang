lib "*std"
lib "*strict"
lib "*state"

a <- Some{a :: (\a, b, c -> [[a, b*2], b, c]) fmap' [8, 5] seq' [6, 3] seq' [1, 9]}

f: x <- x*2
fcx: f <- \f, x -> change: x, 1, f <| \f, x -> change: x, 2, f <| f
mdLs <- \f -> change: a, 2, f <| fcx <| f

mod Shapes
    type Shape <- !Circle{r} | !Square{e} | !Triangle{a, b, c}
    class getV: s
    s@$Circle -> s.r*2
    s@$Square -> s.e*2
    s@$Triangle -> (s.a + s.b + s.c)/2
    a <- 10
end

circ <- Shapes::Circle{r :: 15}

tri <- Shapes::Triangle{a :: 2, b :: 9, c :: 7}

fib: n <- if n < 2 then 1 else (fib: n-1) + (fib: n-2)

out <- fib fmap mlp2 seq (some: \x+circV) seq mdLs[2][1][2] where
    mlp2 <- unit: \x*2, &Maybe
    circV <- Shapes::getV: circ
end