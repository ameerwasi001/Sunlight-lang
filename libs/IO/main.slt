lib "*std"
external "io/baseIO" {unsafeRead, unsafeReadFile, unsafeWriteFile, unsafeExistsFile}

World <- {unsafeF}

class unsafeRunIO: st
st@World -> st.unsafeF: ()
true -> unsafeWrite: st, st

fmap ? s@World -> world: \s0 -> (((f: a), s1) where (a, s1) <- .unsafeF: s, s0 end)

seq ? s@World -> world: \s0 -> ( 
    ((fn: a), s2) where 
        (fn, s1) <- f.unsafeF: s0
        (a, s2) <- s.unsafeF: s1 
    end
)

unit ? r@World -> world: \st -> (s, st)
bind ? s@World -> world: \st -> ( ((f: a).unsafeF): sn where (a, sn) <- .unsafeF: s, st end )

read: a <- world: \st -> ((unsafeRead: a), st)
readln: a <- world: \st -> ((unsafeRead: a .. "\n"), st)
input <- read cmp' stringify  
write: a <- world: \st -> ((unsafeWrite: a, a), st)
print <- write cmp' stringify
println <- \(print: x) {^>=} \print: "\n"

-- File operations in IO Monad
OpenMode <- CreateMode | AppendMode

stringify ? v@CreateMode -> "w"
stringify ? v@AppendMode -> "a"

readFile: a <- world: \st -> ((unsafeReadFile: a), st)
existsFile: s <- world: \st -> ((unsafeExistsFile: s), st)
openFile: n, s, mode <- world: \st -> ((unsafeWriteFile: n, s, stringify: mode), st)
